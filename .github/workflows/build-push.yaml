# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Push"
on:
  push:
    # run on pushes to main
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # # Setup Docker Builder
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # # Login to Docker Hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     ecr: false
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # # Install Dependencies
      # - uses: yokawasa/action-setup-kube-tools@v0.9.2
      #   with:
      #     kubectl: '1.29.0'
      #     skaffold: '2.9.0'
      # - run: |
      #     kubectl version --client
      #     skaffold version

      # Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Push latest images to DockerHub
      #   timeout-minutes: 20
      #   run: |
      #     # skaffold config set --global local-cluster false
      #     skaffold build --default-repo=docker.io/$DOCKERHUB_USERNAME --tag=$GITHUB_SHA
      #   env:
      #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

  # test_source:
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # Checkout Repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     # Run Trivy fs scan
  #     - name: Run Trivy vulnerability scanner for fs
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-ref: .
  #         scan-type: 'fs'
  #         format: 'sarif'
  #         scanners: vuln,secret,config
  #         output: 'trivy-fs-results.sarif'

  #     # Upload fs report to GitHub Security
  #     - name: Upload Trivy rootfs scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-fs-results.sarif'

  trivy_image_scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Run Trivy docker image scan
      # - name: Run Trivy image vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     # image-ref: 'jainrounak6/frontend:${{ github.sha }}'
      #     image-ref: 'jainrounak6/frontend:bbcc5d29a47eb15e48ce2aa7e31ebbea60771a60'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'

      # - name: Scan Docker images with Trivy
      #   run: |
      #     for image in ${{ needs.push-deploy.outputs.images }}; do
      #       trivy image -o trivy-results.sarif --exit-code 1 --no-progress "$image"
      #     done

      - name: Set up Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.48.2/trivy_0.48.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.48.2_Linux-64bit.deb
          trivy --version

      - name: Run Trivy image vulnerability scanner
        run: |
          # Define the list of image names
          images=("loadgenerator" "adservice" "frontend" "cartservice" "paymentservice" "checkoutservice" "emailservice" "currencyservice" "recommendationservice" "shippingservice" "productcatalogservice")

          # Initialize an empty SARIF file
          echo '{"runs": []}' > trivy-results.sarif

          # Iterate through each image, run Trivy scan, and append the results to the SARIF file
          for image in "${images[@]}"; do
            trivy image -f sarif --no-progress "$DOCKERHUB_USERNAME/$image:$TEMP_SHA" >> trivy-results.sarif
          # Add a separator between individual SARIF results
          echo -e "\n\n" >> trivy-results.sarif
          done
        env:
          TEMP_SHA: bbcc5d29a47eb15e48ce2aa7e31ebbea60771a60
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Debug SARIF File Content
        run: |
          cat trivy-results.sarif

      # Upload image report to GitHub Security
      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
